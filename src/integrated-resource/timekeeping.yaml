AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Integrated to resource dynamodb."

Parameters:
  StageName:
    Type: String
  AppName:
    Type: String
  UserPoolArn:
    Type: String
  TableName:
    Type: String
  Api:
    Type: String
  InteCognitoAuthorizer:
    Type: String
  ApiRootResourceId:
    Type: String
  APIGatewayIntegreatedRoleArn:
    Type: String

Resources:
  TimekeepingResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref ApiRootResourceId
      PathPart: "timekeeping"

  StartTimeKeepingResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref TimekeepingResource
      PathPart: "{start-time}"

  EndTimeKeepingResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref StartTimeKeepingResource
      PathPart: "{end-time}"
  
  TimekeepingMethodPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref TimekeepingResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref InteCognitoAuthorizer
      Integration:
        Type: AWS
        Credentials: !Ref APIGatewayIntegreatedRoleArn
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json:
            "Fn::Sub":
              - |
                #set($requestId = $context.requestId)

                {
                  "TableName":"${TableName}",
                  "Key": {
                    "type": {"S":"t"},
                    "epoch": {"N":"$input.path('$.epoch')"}
                  },
                  "UpdateExpression": "SET #subIdField = :newValues",
                  "ExpressionAttributeNames": {
                    "#subIdField": "$input.path('$.sub_id')"
                  },
                  "ExpressionAttributeValues": {
                    ":newValues": {
                      "M": {
                        "staff_name": {"S": "$input.path('$.staff_name')"},
                        "staff_avt": {"S": "$input.path('$.staff_avt')"},
                        "role": {"S": "$input.path('$.role')"},
                        "register_clock_in": {"N": "$input.path('$.register_clock_in')"},
                        "register_clock_out": {"N": "$input.path('$.register_clock_out')"},
                        "clock_in": {"N": "$input.path('$.clock_in')"},
                        "clock_out": {"N": "$input.path('$.clock_out')"},
                        "timekeeper_name": {"S": "$input.path('$.timekeeper_name')"},
                        "timekeeper_avt": {"S": "$input.path('$.timekeeper_avt')"},
                        "status": {"N": "$input.path('$.status')"}
                      }
                    }
                  }
                }
              - TableName: !Ref TableName
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Access-Control-Allow-Headers, Access-Control-Allow-Methods, Accept, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, Authorization'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Methods: "'POST'"
            ResponseTemplates:
              application/json: "{}"
          - StatusCode: "400"
            SelectionPattern: '4\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Bad request"}'
          - StatusCode: "500"
            SelectionPattern: '5\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Internal server error"}'
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: "400"
          ResponseModels:
            application/json: "Error"
        - StatusCode: "500"
          ResponseModels:
            application/json: "Error"

  TimekeepingMethodGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref EndTimeKeepingResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref InteCognitoAuthorizer
      RequestParameters:
        method.request.path.start-time: true
        method.request.path.end-time: true
      Integration:
        Type: AWS
        Credentials: !Ref APIGatewayIntegreatedRoleArn
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestParameters:
          integration.request.path.start-time: method.request.path.start-time
          integration.request.path.end-time: method.request.path.end-time
        RequestTemplates:
          application/json:
            "Fn::Sub": '{"TableName":"${TableName}","KeyConditionExpression":"#type_alias=:v1 AND epoch BETWEEN :startTime AND :endTime","ExpressionAttributeValues":{":v1":{"S":"t"},":startTime":{"N":"$util.urlDecode($input.params(''start-time''))"},":endTime":{"N":"$util.urlDecode($input.params(''end-time''))"}},"ExpressionAttributeNames":{"#type_alias":"type"}}'
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Access-Control-Allow-Headers, Access-Control-Allow-Methods, Accept, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, Authorization'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Methods: "'GET'"
            ResponseTemplates:
              application/json: |
                $input.path('$').Items
          - StatusCode: "400"
            SelectionPattern: '4\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Bad request"}'
          - StatusCode: "500"
            SelectionPattern: '5\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Internal server error"}'
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: "400"
          ResponseModels:
            application/json: "Error"
        - StatusCode: "500"
          ResponseModels:
            application/json: "Error"

  TimekeepingMethodDelete:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref EndTimeKeepingResource
      HttpMethod: DELETE
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref InteCognitoAuthorizer
      RequestParameters:
        method.request.path.start-time: true
        method.request.path.end-time: true
      Integration:
        Type: AWS
        Credentials: !Ref APIGatewayIntegreatedRoleArn
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestParameters:
          integration.request.path.start-time: method.request.path.start-time
          integration.request.path.end-time: method.request.path.end-time
        RequestTemplates:
          application/json:
            "Fn::Sub": '{"TableName": "${TableName}", "Key": {"type": {"S": "t"}, "epoch": {"N": "$util.urlDecode($input.params(''start-time''))"}}, "UpdateExpression": "REMOVE #field_name", "ExpressionAttributeNames": {"#field_name": "$util.urlDecode($input.params(''end-time''))"}}'
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Access-Control-Allow-Headers, Access-Control-Allow-Methods, Accept, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, Authorization'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE'"
            ResponseTemplates:
              application/json: "{}"
          - StatusCode: "400"
            SelectionPattern: '4\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Bad request"}'
          - StatusCode: "500"
            SelectionPattern: '5\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Internal server error"}'
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: "400"
          ResponseModels:
            application/json: "Error"
        - StatusCode: "500"
          ResponseModels:
            application/json: "Error"
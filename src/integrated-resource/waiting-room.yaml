AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Integrated to resource dynamodb."

Parameters:
  StageName:
    Type: String
  AppName:
    Type: String
  UserPoolArn:
    Type: String
  TableName:
    Type: String
  Api:
    Type: String
  InteCognitoAuthorizer:
    Type: String
  ApiRootResourceId:
    Type: String
  APIGatewayIntegreatedRoleArn:
    Type: String

Resources:
  WaitingRoomResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref ApiRootResourceId
      PathPart: "waiting-room"

  EpochResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref WaitingRoomResource
      PathPart: "{epoch}"

  WaitingRoomMethodGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref WaitingRoomResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref InteCognitoAuthorizer
      RequestParameters:
        method.request.path.start-time: true
        method.request.path.end-time: true
      Integration:
        Type: AWS
        Credentials: !Ref APIGatewayIntegreatedRoleArn
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestParameters:
          integration.request.path.start-time: method.request.path.start-time
          integration.request.path.end-time: method.request.path.end-time
        RequestTemplates:
          application/json:
            "Fn::Sub":
              - |
                #set($currentEpochTime = ($context.requestTimeEpoch / 1000) + 25200)
                #set($secondsInADay = 86400)
                #set($startOfDayEpoch = $currentEpochTime - ($currentEpochTime % $secondsInADay))
                #set($endOfDayEpoch = $startOfDayEpoch + $secondsInADay - 1)
                {
                    "TableName": "${TableName}",
                    "KeyConditionExpression": "#type_alias=:v1 AND epoch BETWEEN :startTime AND :endTime",
                    "ExpressionAttributeValues": {
                        ":v1": {"S": "w"},
                        ":startTime": {"N": "$startOfDayEpoch.toString()"},
                        ":endTime": {"N": "$endOfDayEpoch.toString()"}
                    },
                    "ExpressionAttributeNames": {"#type_alias": "type"}
                }
              - TableName: !Ref TableName
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Access-Control-Allow-Headers, Access-Control-Allow-Methods, Accept, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, Authorization'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Methods: "'GET'"
            ResponseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                [#foreach($field in $inputRoot.Items)
                  {
                    "type": "$field.type.S",
                    "epoch": "$field.epoch.N",
                    "produce_id": "$field.produce.S",
                    "produce_name": "$field.produce_name.S",
                    "patient_id": "$field.patient_id.S",
                    "patient_name": "$field.patient_id.S",
                    "reason": "$field.reason.S",
                    "status": "$field.status_value.N"
                  }
                  #if($foreach.hasNext),#end
                #end]
          - StatusCode: "400"
            SelectionPattern: '4\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Bad request"}'
          - StatusCode: "500"
            SelectionPattern: '5\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Internal server error"}'
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: "400"
          ResponseModels:
            application/json: "Error"
        - StatusCode: "500"
          ResponseModels:
            application/json: "Error"

  WaitingRoomMethodPut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref EpochResource
      HttpMethod: PUT
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref InteCognitoAuthorizer
      RequestParameters:
        method.request.path.epoch: true
      Integration:
        Type: AWS
        Credentials: !Ref APIGatewayIntegreatedRoleArn
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json:
            "Fn::Sub":
              - |
                {
                  "TableName": "${TableName}",
                  "Key": {
                      "type": {"S": "w"},
                      "epoch": {"N": "$input.params('epoch')"}
                  },
                  "UpdateExpression": "SET produce_id = :produce_id, patient_id = :patient_id, patient_name = :patient_name, reason = :reason, status_value = :status",
                  "ExpressionAttributeValues": {
                    ":produce_id": {"S": "$input.path('$.produce_id')"},
                    ":produce_name": {"S": "$input.path('$.produce_name')"},
                    ":patient_id": {"S": "$input.path('$.patient_id')"},
                    ":patient_name": {"S": "$input.path('$.patient_name')"},
                    ":reason": {"S": "$input.path('$.reason')"},
                    ":status": {"N": "$input.path('$.status')"}
                  }
                }
              - TableName: !Ref TableName
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Access-Control-Allow-Headers, Access-Control-Allow-Methods, Accept, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, Authorization'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Methods: "'PUT'"
            ResponseTemplates:
              application/json: '{"message": "Update successful"}'
          - StatusCode: "400"
            SelectionPattern: '4\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Bad request"}'
          - StatusCode: "500"
            SelectionPattern: '5\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Internal server error"}'
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: "400"
          ResponseModels:
            application/json: "Error"
        - StatusCode: "500"
          ResponseModels:
            application/json: "Error"

  WaitingRoomMethodPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref WaitingRoomResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref InteCognitoAuthorizer
      Integration:
        Type: AWS
        Credentials: !Ref APIGatewayIntegreatedRoleArn
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem" # Sử dụng PutItem thay vì UpdateItem để tạo mới bản ghi
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json:
            "Fn::Sub":
              - |
                {
                  "TableName":"${TableName}",
                  "Item": {
                    "type": {"S": "w"},
                    "epoch": {"N": "$input.path('$.epoch')"},
                    "produce_id": {"S": "$input.path('$.produce_id')"},
                    "produce_name": {"S": "$input.path('$.produce_name')"},
                    "patient_id": {"S": "$input.path('$.patient_id')"},
                    "patient_name": {"S": "$input.path('$.patient_name')"},
                    "reason": {"S": "$input.path('$.reason')"},
                    "status_value": {"N": "$input.path('$.status')"}
                  }
                }
              - TableName: !Ref TableName
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Access-Control-Allow-Headers, Access-Control-Allow-Methods, Accept, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, Authorization'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Methods: "'POST'"
            ResponseTemplates:
              application/json: "{}"
          - StatusCode: "400"
            SelectionPattern: '4\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Bad request"}'
          - StatusCode: "500"
            SelectionPattern: '5\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Internal server error"}'
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: "400"
          ResponseModels:
            application/json: "Error"
        - StatusCode: "500"
          ResponseModels:
            application/json: "Error"

  WaitingRoomMethodDelete:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref EpochResource
      HttpMethod: DELETE
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref InteCognitoAuthorizer
      RequestParameters:
        method.request.path.epoch: true
      Integration:
        Type: AWS
        Credentials: !Ref APIGatewayIntegreatedRoleArn
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/DeleteItem"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json:
            "Fn::Sub":
              - |
                {
                    "TableName": "${TableName}",
                    "Key": {
                        "type": {"S": "w"},
                        "epoch": {"N": "$input.params('epoch')"}
                    }
                }
              - TableName: !Ref TableName
        IntegrationResponses:
          - StatusCode: "204"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Access-Control-Allow-Headers, Access-Control-Allow-Methods, Accept, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, Authorization'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE'"
            ResponseTemplates:
              application/json: ""
          - StatusCode: "400"
            SelectionPattern: '4\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Bad request"}'
          - StatusCode: "500"
            SelectionPattern: '5\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Internal server error"}'
      MethodResponses:
        - StatusCode: "204"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: "400"
          ResponseModels:
            application/json: "Error"
        - StatusCode: "500"
          ResponseModels:
            application/json: "Error"

  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - WaitingRoomMethodGet
      - WaitingRoomMethodPut
    Properties:
      RestApiId: !Ref Api
      StageName: !Sub "${StageName}"

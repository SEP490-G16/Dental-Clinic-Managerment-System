AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Integrated to resource dynamodb for appointment"

Parameters:
  StageName:
    Type: String
  AppName:
    Type: String
  UserPoolArn:
    Type: String
  TableName:
    Type: String
  Api:
    Type: String
  InteCognitoAuthorizer:
    Type: String
  ApiRootResourceId:
    Type: String
  APIGatewayIntegreatedRoleArn:
    Type: String

Resources:
  AppointmentResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref ApiRootResourceId
      PathPart: "appointment"

  StartTimeResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref AppointmentResource
      PathPart: "{start-time}"

  EndTimeResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref StartTimeResource
      PathPart: "{end-time}"

  AppointmentMethodPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref AppointmentResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref InteCognitoAuthorizer
      Integration:
        Type: AWS
        Credentials: !Ref APIGatewayIntegreatedRoleArn
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json:
            "Fn::Sub":
              - |
                #set($requestId = $context.requestId)
                {
                  "TableName":"${TableName}",
                  "Key": {
                    "type": {"S":"a"},
                    "epoch": {"N":"$input.path('$.epoch')"}
                  },
                  "UpdateExpression": "SET #requestIdField = :newValues",
                  "ExpressionAttributeNames": {
                    "#requestIdField": "$requestId"
                  },
                  "ExpressionAttributeValues": {
                    ":newValues": {
                      "M": {
                        "patient_id": {"S": "$input.path('$.appointment.patient_id')"},
                        "patient_name": {"S": "$input.path('$.appointment.patient_name')"},
                        "phone_number": {"S": "$input.path('$.appointment.phone_number')"},
                        "procedure_id": {"S": "$input.path('$.appointment.procedure_id')"},
                        "procedure_name": {"S": "$input.path('$.appointment.procedure_name')"},
                        "doctor": {"S": "$input.path('$.appointment.doctor')"},
                        "time": {"N": "$input.path('$.appointment.time')"},
                        "status": {"N": "$input.path('$.appointment.status')"},
                        "migrated": {"BOOL": false}
                      }
                    }
                  }
                }
              - TableName: !Ref TableName
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Access-Control-Allow-Headers, Access-Control-Allow-Methods, Accept, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, Authorization'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Methods: "'POST'"
            ResponseTemplates:
              application/json: "{}"
          - StatusCode: "400"
            SelectionPattern: '4\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Bad request"}'
          - StatusCode: "500"
            SelectionPattern: '5\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Internal server error"}'
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: "400"
          ResponseModels:
            application/json: "Error"
        - StatusCode: "500"
          ResponseModels:
            application/json: "Error"

  AppointmentMethodGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref EndTimeResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref InteCognitoAuthorizer
      RequestParameters:
        method.request.path.start-time: true
        method.request.path.end-time: true
      Integration:
        Type: AWS
        Credentials: !Ref APIGatewayIntegreatedRoleArn
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestParameters:
          integration.request.path.start-time: method.request.path.start-time
          integration.request.path.end-time: method.request.path.end-time
        RequestTemplates:
          application/json:
            "Fn::Sub": '{"TableName":"${TableName}","KeyConditionExpression":"#type_alias=:v1 AND epoch BETWEEN :startTime AND :endTime","ExpressionAttributeValues":{":v1":{"S":"a"},":startTime":{"N":"$util.urlDecode($input.params(''start-time''))"},":endTime":{"N":"$util.urlDecode($input.params(''end-time''))"}},"ExpressionAttributeNames":{"#type_alias":"type"}}'
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Access-Control-Allow-Headers, Access-Control-Allow-Methods, Accept, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, Authorization'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Methods: "'GET'"
            ResponseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))[#foreach($item in $inputRoot.Items)#set($grouped = {})#set($counts = {})#foreach($key in $item.keySet())#if($key != "type" && $key != "epoch")#if(!$grouped.containsKey($util.escapeJavaScript($item[$key].M.procedure_id.S)))#set($grouped[$util.escapeJavaScript($item[$key].M.procedure_id.S)] = [])#set($counts[$util.escapeJavaScript($item[$key].M.procedure_id.S)] = 0)#end#set($appointment = {"appointment_id": "$key","patient_id": "$util.escapeJavaScript($item[$key].M.patient_id.S)","patient_name":"$util.escapeJavaScript($item[$key].M.patient_name.S)","phone_number": "$util.escapeJavaScript($item[$key].M.phone_number.S)","procedure_id": "$util.escapeJavaScript($item[$key].M.procedure_id.S)","procedure_name": "$util.escapeJavaScript($item[$key].M.procedure_name.S)","doctor": "$util.escapeJavaScript($item[$key].M.doctor.S)","time": $item[$key].M.time.N,"status": $item[$key].M.status.N,"attribute_name": "$util.escapeJavaScript($item[$key].M.attribute_name.S)","epoch": $item[$key].M.epoch.N,"migrated": $item[$key].M.migrated.BOOL})#set($discard = $grouped[$util.escapeJavaScript($item[$key].M.procedure_id.S)].add($appointment))#set($counts[$util.escapeJavaScript($item[$key].M.procedure_id.S)] = $counts[$util.escapeJavaScript($item[$key].M.procedure_id.S)] + 1)#end#end{"date": $item.epoch.N,"appointments": [#foreach($procKey in $grouped.keySet()){"procedure_id": "$procKey","count": $counts[$procKey],"details": $grouped[$procKey]}#if($foreach.hasNext),#end#end]}#if($foreach.hasNext),#end#end]
          - StatusCode: "400"
            SelectionPattern: '4\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Bad request"}'
          - StatusCode: "500"
            SelectionPattern: '5\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Internal server error"}'
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: "400"
          ResponseModels:
            application/json: "Error"
        - StatusCode: "500"
          ResponseModels:
            application/json: "Error"

  AppointmentMethodPut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref StartTimeResource
      HttpMethod: PUT
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref InteCognitoAuthorizer
      RequestParameters:
        method.request.path.start-time: true
      Integration:
        Type: AWS
        Credentials: !Ref APIGatewayIntegreatedRoleArn
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/TransactWriteItems"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestParameters:
          integration.request.path.start-time: method.request.path.start-time
        RequestTemplates:
          application/json:
            "Fn::Sub":
              - |
                #set($requestId = $context.requestId)
                #set($epoch = $input.path('$.epoch'))
                #set($newEpoch = $input.path('$.new_epoch'))
                #set($attributeName = $input.params('start-time'))
                #if($epoch == $newEpoch)
                {
                  "TransactItems": [
                    {
                      "Update": {
                        "TableName": "${TableName}",
                        "Key": {
                          "type": {"S":"a"},
                          "epoch": {"N":"$epoch"}
                        },
                        "UpdateExpression": "SET #requestIdField = :newValues",
                        "ExpressionAttributeNames": {
                          "#requestIdField": "$attributeName"
                        },
                        "ExpressionAttributeValues": {
                          ":newValues": {
                            "M": {
                              "patient_id": {"S": "$input.path('$.appointment.patient_id')"},
                              "patient_name": {"S": "$input.path('$.appointment.patient_name')"},
                              "phone_number": {"S": "$input.path('$.appointment.phone_number')"},
                              "procedure_id": {"S": "$input.path('$.appointment.procedure_id')"},
                              "procedure_name": {"S": "$input.path('$.appointment.procedure_name')"},
                              "doctor": {"S": "$input.path('$.appointment.doctor')"},
                              "time": {"N": "$input.path('$.appointment.time')"},
                              "status": {"N": "$input.path('$.appointment.status')"},
                              "migrated": {"BOOL": false}
                            }
                          }
                        }
                      }
                    }
                  ]
                }
                #else
                {
                  "TransactItems": [
                    {
                      "Update": {
                        "TableName": "${TableName}",
                        "Key": {
                          "type": {"S":"a"},
                          "epoch": {"N":"$newEpoch"}
                        },
                        "UpdateExpression": "SET #requestIdField = :newValues",
                        "ExpressionAttributeNames": {
                          "#requestIdField": "$requestId"
                        },
                        "ExpressionAttributeValues": {
                          ":newValues": {
                            "M": {
                              "patient_id": {"S": "$input.path('$.appointment.patient_id')"},
                              "patient_name": {"S": "$input.path('$.appointment.patient_name')"},
                              "phone_number": {"S": "$input.path('$.appointment.phone_number')"},
                              "procedure_id": {"S": "$input.path('$.appointment.procedure_id')"},
                              "procedure_name": {"S": "$input.path('$.appointment.procedure_name')"},
                              "doctor": {"S": "$input.path('$.appointment.doctor')"},
                              "time": {"N": "$input.path('$.appointment.time')"},
                              "status": {"N": "$input.path('$.appointment.status')"},
                              "migrated": {"BOOL": false}
                            }
                          }
                        }
                      }
                    },
                    {
                      "Update": {
                        "TableName": "${TableName}",
                        "Key": {
                          "type": {"S":"a"},
                          "epoch": {"N":"$epoch"}
                        },
                        "UpdateExpression": "SET #requestIdField = :newValues",
                        "ExpressionAttributeNames": {
                          "#requestIdField": "$attributeName"
                        },
                        "ExpressionAttributeValues": {
                          ":newValues": {
                            "M": {
                              "attribute_name": {"S": "$requestId"},
                              "epoch": {"N": "$newEpoch"},
                              "migrated": {"BOOL": true}
                            }
                          }
                        }
                      }
                    }
                  ]
                }
                #end
              - TableName: !Ref TableName
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Access-Control-Allow-Headers, Access-Control-Allow-Methods, Accept, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, Authorization'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Methods: "'PUT'"
            ResponseTemplates:
              application/json: "{}"
          - StatusCode: "400"
            SelectionPattern: '4\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Bad request"}'
          - StatusCode: "500"
            SelectionPattern: '5\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Internal server error"}'
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: "400"
          ResponseModels:
            application/json: "Error"
        - StatusCode: "500"
          ResponseModels:
            application/json: "Error"

  AppointmentMethodDeleteNew:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref EndTimeResource
      HttpMethod: DELETE
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref InteCognitoAuthorizer
      RequestParameters:
        method.request.path.start-time: true
        method.request.path.end-time: true
      Integration:
        Type: AWS
        Credentials: !Ref APIGatewayIntegreatedRoleArn
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestParameters:
          integration.request.path.start-time: method.request.path.start-time
          integration.request.path.end-time: method.request.path.end-time
        RequestTemplates:
          application/json:
            "Fn::Sub":
              - |
                {
                  "TableName":"${TableName}",
                  "Key": {
                    "type": {"S":"a"},
                    "epoch": {"N":"$util.urlDecode($input.params('start-time'))"}
                  },
                  "UpdateExpression": "REMOVE #field_name",
                  "ExpressionAttributeNames": {
                    "#field_name": "$util.urlDecode($input.params('end-time'))"
                  }
                }
              - TableName: !Ref TableName
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Access-Control-Allow-Headers, Access-Control-Allow-Methods, Accept, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, Authorization'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Methods: "'POST'"
            ResponseTemplates:
              application/json: "{}"
          - StatusCode: "400"
            SelectionPattern: '4\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Bad request"}'
          - StatusCode: "500"
            SelectionPattern: '5\d{2}'
            ResponseTemplates:
              application/json: '{"error":"Internal server error"}'
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: "400"
          ResponseModels:
            application/json: "Error"
        - StatusCode: "500"
          ResponseModels:
            application/json: "Error"

  # WaittingRoomMethodGet:
  #   Type: "AWS::ApiGateway::Method"
  #   Properties:
  #     RestApiId: !Ref Api
  #     ResourceId: !Ref EndTimeResource
  #     HttpMethod: GET
  #     AuthorizationType: COGNITO_USER_POOLS
  #     AuthorizerId: !Ref InteCognitoAuthorizer
  #     RequestParameters:
  #       method.request.path.start-time: true
  #       method.request.path.end-time: true
  #     Integration:
  #       Type: AWS
  #       Credentials: !Ref APIGatewayIntegreatedRoleArn
  #       IntegrationHttpMethod: POST
  #       Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query"
  #       PassthroughBehavior: WHEN_NO_TEMPLATES
  #       RequestParameters:
  #         integration.request.path.start-time: method.request.path.start-time
  #         integration.request.path.end-time: method.request.path.end-time
  #       RequestTemplates:
  #         application/json:
  #           "Fn::Sub": '{"TableName":"${TableName}","KeyConditionExpression":"#type_alias=:v1 AND epoch BETWEEN :startTime AND :endTime","ExpressionAttributeValues":{":v1":{"S":"a"},":startTime":{"N":"$util.urlDecode($input.params(''start-time''))"},":endTime":{"N":"$util.urlDecode($input.params(''end-time''))"}},"ExpressionAttributeNames":{"#type_alias":"type"}}'
  #       IntegrationResponses:
  #         - StatusCode: "200"
  #           ResponseTemplates:
  #             application/json: |
  #               #set($inputRoot = $input.path('$'))
  #               {
  #                 "appointment": [
  #                   #foreach($field in $inputRoot.Items)
  #                     {
  #                       "type": "$field.type.S",
  #                       "epoch": "$field.epoch.N",
  #                       "info": "$field.info.S"
  #                     }
  #                     #if($foreach.hasNext),#end
  #                   #end
  #                 ]
  #               }
  #         - StatusCode: "400"
  #           SelectionPattern: '4\d{2}'
  #           ResponseTemplates:
  #             application/json: '{"error":"Bad request"}'
  #         - StatusCode: "500"
  #           SelectionPattern: '5\d{2}'
  #           ResponseTemplates:
  #             application/json: '{"error":"Internal server error"}'
  #     MethodResponses:
  #       - StatusCode: "200"
  #       - StatusCode: "400"
  #         ResponseModels:
  #           application/json: "Error"
  #       - StatusCode: "500"
  #         ResponseModels:
  #           application/json: "Error"

  # MusicMethodPost:
  #   Type: "AWS::ApiGateway::Method"
  #   Properties:
  #     RestApiId: !Ref Api
  #     ResourceId: !Ref MusicResource
  #     HttpMethod: POST
  #     ApiKeyRequired: true
  #     AuthorizationType: NONE
  #     Integration:
  #       Type: AWS
  #       Credentials: !GetAtt APIGatewayRole.Arn
  #       # Should always be POST when integrating with AWS services
  #       IntegrationHttpMethod: POST
  #       # More info: https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/
  #       Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem"
  #       PassthroughBehavior: WHEN_NO_TEMPLATES
  #       RequestTemplates:
  #         # Build the structure of the request that is sent when calling DynamoDB PutItem
  #         # Using single-line, stringified JSON as the mapping template
  #         # Example body when making API request: {"artist": "The Beatles", "album": "Abbey Road"}
  #         # Use the unique id of the API context variable (eg: $context.requestId) as the DynamoDB item id
  #         application/json:
  #           {
  #             "Fn::Sub": '{"TableName":"${TableName}","Item":{"id":{"S":"$context.requestId"},"artist":{"S":"$input.path(''$.artist'')"},"album":{"S":"$input.path(''$.album'')"}}}',
  #           }
  #       IntegrationResponses:
  #         - StatusCode: "200"
  #           ResponseTemplates:
  #             application/json: "{}"
  #     MethodResponses:
  #       - StatusCode: "200"
  # MusicArtistResource:
  #   Type: "AWS::ApiGateway::Resource"
  #   Properties:
  #     RestApiId: !Ref Api
  #     ParentId: !Ref MusicResource
  #     PathPart: "{artist}"

  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - AppointmentMethodPost
      - AppointmentMethodPut
      - AppointmentMethodGet
    Properties:
      RestApiId: !Ref Api
      StageName: !Sub "${StageName}"

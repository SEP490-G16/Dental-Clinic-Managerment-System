name: Deploy Lambda

on:
  push:
    branches:
      - main

jobs:
  setup_and_dependencies:
    name: Setup & Dependencies
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: 14.X
      PYTHON_VERSION: 3.8
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-node-modules-${{ hashFiles('**/package-lock.json') }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-build-node-modules-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Node dependencies (specifically, serverless-python-requirements)
        run: npm install

  lint:
    needs: setup_and_dependencies
    name: "Linting with Flake8"
    runs-on: ubuntu-latest
    steps:
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - uses: actions/checkout@v2

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --indent-size=2 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  pytest:
    needs: setup_and_dependencies
    name: "Unittest with Pytest"
    runs-on: ubuntu-latest
    steps:
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - uses: actions/checkout@v2

      - name: Run tests with pytest
        if: steps.check_tests.outputs.has_tests == 'true'
        run: pytest

  security_scans:
    needs: setup_and_dependencies
    name: "Security Scans with CodeQL"
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ];
          then pip install -r requirements.txt;
          fi
          # Set the `CODEQL-PYTHON` environment variable to the Python executable
          # that includes the dependencies
          echo "CODEQL_PYTHON=$(which python)" >> $GITHUB_ENV

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
          # Override the default behavior so that the action doesn't attempt
          # to auto-install Python dependencies
          setup-python-dependencies: false
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Perform CodeQL Scan
        uses: github/codeql-action/analyze@v1

  sonarqube:
    needs: setup_and_dependencies
    name: "Security Scans with SonarQube"
    runs-on: ubuntu-latest
    steps:
    - name: Checking out
      uses: actions/checkout@master
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan
      uses: kitabisa/sonarqube-action@v1.2.0
      with:
        host: ${{ secrets.SONARQUBE_HOST }}
        login: ${{ secrets.SONARQUBE_TOKEN }}
      with:
          args:
            -Dsonar.projectKey=<sonar_project_key>
            -Dsonar.organization=${{ secrets.SONARQUBE_ORG }}

  deploy:
    needs: [lint, pytest, security_scans, sonarqube]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Serverless Deploy
        uses: tuananh1905/actions.serverless-with-python-requirements@master
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
